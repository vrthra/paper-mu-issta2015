\section{Conclusion}
\label{sec:conclusion}

Our analysis suggests that while some of the different strategies produce
slightly advantageous mutation subsets, overall, the advantage thus gained
is very little. None of the common operator selection strategies performed
consistently well against random sampling while using either the utility or
the mutation effectiveness criteria. While some of the individual operators
such as \Pitrv, \Piti, \Pitri, and \Pites show promise in test utility,
they do not stand out when we examine the mutation effectiveness in comparison
to baseline.

A similar result seems to be the case for operator based x\% selection
strategy or even for the element based x\% strategy. They in general show a
slight advantage in test utility which doesn't seem to translate to the
strategy effectiveness in comparison with baseline.

Thus we find that that none of the well known reduction strategies are actually
able to consistenly select useful mutants, and the best path forward
for a working tester is to rely on the simplest scheme of all -- the random
selection of mutants.

There is a second possible point of interest here: as with coverage
metrics used to predict mutation scores~\cite{gopinath2014code}, using
a large body of actual open source code to perform experiments seems
to favor simple and easily-implemented approaches much more strongly
than limited experiments on more academic subjects.  We speculate that
the inadequacies in real world test suites may frequently be more simply
predicted and evaluated than for typical research subjects, which may
be smaller or involve less easily distinguished test suites.

