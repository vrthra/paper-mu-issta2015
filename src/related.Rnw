\section{Related Work}
\label{sec:related}
In this section we summarize the related work. There have been
different approaches to reduce the cost of mutation analysis.
Offutt \cite{} categorize them in three categories: Do Fewer, 
Do Smarter, Do Faster approaches.

\subsection{Do Fewer}
The idea of using a subset of mutants instead of all of them started
by Mathur\cite{mathur1991performance} and 
further have developed by Wong et al.\cite{wong1993mutation, wong1995reducing}
 and Offut et al. \cite{offutt1993experimental}.
Each of them targeted the mutation operators of Mothra \cite{Mothra}.
Mathur \cite{mathur1991performance} suggested removal of two mutation operators
has little effect on the effectiveness of mutation testing.
Offut et al. \cite{offutt1993experimental} experiment removal of 
upto six mutation operators. They observe that the reduction has
little effect on the mutation score.
Wong and Mathur \cite{wong1995reducing} suggested two operators in Mothra system
that could approximate mutation score. They also proposed \%x sampling.


The idea is that normal mutation has quadratic complexity on variable references while eliminatng the most fecund mutagens (SVR and ASR) achieves linear complexity on program size, while still approximating the full mutation score closely. They propose N-selective mutation which avoids N most fertile mutagens. 
Wong \cite{wong1995reducing} compares the effect of x\% mutation selection, and abs/ror constrained mutation. According to Wong, this is different from selective mutation in that only the most fecund operators are included rather than excluded. He finds that there is no evidence to suggest one over the other. Offutt\cite{offutt1993experimental} does not compare the effectivenss of selective mutation with x\% mutation. He also defines the concept of {\it operator strength} for an operator, which is defined as the total number of mutants that are killed by test data that is generated to kill only the mutants generated by that operator. He further posits that the mutagens with greatest strength may be the most useful ones. %(test data generated to eliminate variants of one operator may remove the mutants of other kinds too.)
This is taken up later by Mresa\cite{mresa1999efficiency} et al. who used the cost of detection of mutants as a means of selection, and uses it to define another set of operators (san, aor, sdl, ror, uoi). They also find that if very high mutation score close to 100\% is required, x\% selective mutation is better than operator selection, and conversely for less stringent scores, operator selection would be better if const of mutant is considered.

Barbosa et. al.\cite{barbosa2001toward} provides a set of guidelines for selecting mutagens.

Namin et al.\cite{namin2006finding,siami2008sufficient} treats the operator selection as a variable reduction problem, and applying statistical approaches, finds 28 operators from a total of 108 operators that are sufficient for an adequate test suite.

Offutt\cite{offutt1996anexperimental} following the previous paper\cite{offutt1993experimental} compares the effectiveness of selecting different operators. He divides the total operators into operand, operation, and statement categories, with es-selective avoiding operands, rs-selective avoiding operations, and re-selective avoiding statements, and e-selective only operations. He finds that using only operation based mutation operators (numbering 5) is sufficient for close approximation of full mutation score. He suggests that the reason they are effective is that most statements contain operators. He further posits that another reason is the amount of semantic change accomplished by an operator, and perhaps the most interesting ones are those that produce the smallest semantic difference.
% Replacement of Operand , Statement modification, Expression Modification: modify operators, ES-selective : not using operand, RS-Selective: not using expression, RE-Selective: not uinsg statement, E-selective : only expression..

Unch\cite{untch2009onreduced} suggested using a single mutagen statement deletion. He compares the statement deletion with other selective mutagen sets, and finds statement deletion operator to provide the best prediction of original mutation score ($R^2 = 0.97$)
This was carried forward by Deng et al\cite{deng2013empirical}, (according to whom, random sampling was weak when it was made low enough for appreciable mutant savings). They realize a mean mutation score of 92\% for adequate test suites with SDL alone, and generating a saving of 81\% in the number of mutants, and 41\% fewer equivalent mutants.

Zhang et al.\cite{zhang2010operator}, compares operator based mutant selection to random mutant selection. They compare three diffrent operator based selection techniques from Offutt et al., Barbosa et al., and Namin et al. against random mutant selection, with equal mutant probability, and equal mutagen probaiblity. They find that none of these selection techniques are superior to random selection, with same number of mutants. They also find that equal mutation sampling is more effective for larger subjects compared to equal mutagen sampling and the reverse is true for smaller subjects.
A second paper by Zhang et al.\cite{zhang2013ase} investigates 8 sampling strategies on top of operator based mutant selection. They find that sampling strategies based on programming elements (method based) performed best.
% Baseline : x\% from selected set
% MOP : x\% from each mutagen
% for these, it is sampled from operator based selected set.
% PLEm : x\% from inside the same program element.
% PLE + MOP: sample x\% from same mutagen from same element.

% Empirical Evaluation of the Statement Deletion Mutation Operator : Offutt
Deng et al~\cite{deng2013empirical} considers the effect of using a single mutation operator -- the statement deletion operator. They define deletion for different language elements,
