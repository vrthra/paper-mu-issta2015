\section{Results}
\label{sec:results}

Our results for x\% sampling over program elements are given
in Table~\ref{tbl:xselsample}. The result of its variation, using
\textit{round(sample)} is given in Table~\ref{tbl:xselround}. The result
of using \textit{ceil(sample)} is given in Table~\ref{tbl:xselceil}.
The first column in each table provides the scope of sampling i.e if it was
done per class, per method, per line etc. The second column provides the
fraction involved.  Third column contains the $R^2$ value obtained between
the mutation score of the sampling criteria used and the full mutation score.
The fourth column contains the mutant reduction factor. This is the average of
total mutants produced divided by the number of mutants sampled by the criteria.
Fifth column contains the standard deviation of the same. A few of the projects
did not return any value for certain sampling criterias for particular mutation
reduction fractions. The sixth column contains the number of projects that
actually had valid values for the criteria being considered. The seventh column
is the average multiplier between the sampled mutation score and the full mutation
score.

The Table~\ref{tbl:lcountl} provides the results for line count criteria where the
sampling was conducted outside program element, and Table~\ref{tbl:lcountw} contains
the results for line count criteria where the sampling was conducted inside the
program element.


\subsection{SDL vs Random selection}
\begin{figure*}[t]
<<sdl.x,fig.width=10, fig.height=10, out.width='.95\\linewidth', out.heigth='4in', echo=F, message=F, warn=F,fig.lp="fig:">>=
par(mfrow=c(2,2))
with(o.pit.all, plot(all.cov~TSDL.cov, pch='+', main='Original SDL'))
with(o.pit.all, plot(all.cov~l.1x1_per_line.cov, pch='+', main='Original 1 per line'))
with(r.pit.all, plot(all.cov~TSDL.cov, pch='+', main='Randoop SDl'))
with(r.pit.all, plot(all.cov~l.1x1_per_line.cov, pch='+', main='Randoop 1 per line'))
@
\label{fig:sdl1}
\caption{Statement Deletion vs One per line.}
\end{figure*}
<<results='asis'>>=
oprand <- subset(stats.df,!grepl('^..op', rownames(stats.df)))

oprand.x <- subset(oprand,grepl('^.1x[0-9]+_per_', operator))
oprand.l <- subset(oprand,!grepl('^.1x[0-9]+_per_', operator))
@
